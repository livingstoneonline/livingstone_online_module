<?php

/**
 * @file
 * Defines the batch definition and operations for generating the RDF for NINES.
 */

require_once drupal_get_path('module', 'livingstone') . '/includes/batch.inc';

/**
 * Defines the batch for generating the NINES RDF zip file.
 *
 * @return array
 *   The batch definition.
 */
function livingstone_nines_batch() {
  $num_section_pages = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'section_page', '=')
    ->countQuery()
    ->execute()
    ->fetchField();

  $num_manuscripts = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'manuscript', '=')
    ->countQuery()
    ->execute()
    ->fetchField();

  return array(
    'operations' => array(
      array('livingstone_nines_export_section_pages_batch_operation', array($num_section_pages)),
      array('livingstone_nines_export_manuscripts_batch_operation', array($num_manuscripts)),
      array('livingstone_nines_export_zip_batch_operation', array()),
      array('livingstone_nines_export_cleanup_operation', array()),
    ),
    'finished' => 'livingstone_batch_finished',
    'title' => t('Updating the Import table...'),
    'init_message' => t('Preparing to update the import table...'),
    'progress_message' => t('Time elapsed: @elapsed <br/>Estimated time remaining @estimate.'),
    'error_message' => t('An error has occurred.'),
    'file' => drupal_get_path('module', 'livingstone_nines') . '/nines.batch.inc',
  );
}

/**
 * Creates a RDF file for each section_page node.
 *
 * @param int $num_section_pages
 *   The number of section pages to export.
 * @param array &$context
 *   The batch context.
 */
function livingstone_nines_export_section_pages_batch_operation($num_section_pages, array &$context) {
  module_load_include('inc', 'livingstone_nines', 'nines');
  $pos = livingstone_start_batch_operation_iteration($num_section_pages, $context);
  $nids = db_select('node', 'n')
    ->condition('type', 'section_page', '=')
    ->fields('n', array('nid'))
    ->orderBy('nid', 'ASC')
    ->range($pos, 25)
    ->execute()
    ->fetchCol();
  foreach (node_load_multiple($nids) as $node) {
    // Generate the RDF and keep track of it.
    $file = \NINES\export_section_page($node);
    if ($file) {
      livingstone_batch_track_file($file, $context);
    }
  }
  livingstone_set_progress_message($context, 'Exporting Section Pages (@progress of @total)');
  livingstone_end_batch_operation_iteration($context, count($nids), 'Successfully Exported @total Section Pages', array(
    '@total' => $num_section_pages,
  ));
}

/**
 * Creates a RDF file for each manuscript in Fedora.
 *
 * @param int $num_manuscripts
 *   The number of manuscripts to export.
 * @param array &$context
 *   The batch context.
 */
function livingstone_nines_export_manuscripts_batch_operation($num_manuscripts, array &$context) {
  module_load_include('inc', 'livingstone_nines', 'nines');
  $pos = livingstone_start_batch_operation_iteration($num_manuscripts, $context);
  $nids = db_select('node', 'n')
    ->condition('type', 'manuscript', '=')
    ->fields('n', array('nid'))
    ->orderBy('nid', 'ASC')
    ->range($pos, 25)
    ->execute()
    ->fetchCol();
  foreach (node_load_multiple($nids) as $node) {
    // Generate the RDF and keep track of it.
    $file = \NINES\export_manuscript($node);
    if ($file) {
      livingstone_batch_track_file($file, $context);
    }
  }
  livingstone_set_progress_message($context, 'Exporting Manuscripts (@pos of @total)', array(
    '@pos' => $pos,
    '@total' => $num_manuscripts,
  ));
  livingstone_end_batch_operation_iteration($context, count($nids), 'Successfully Exported @total Manuscripts.', array(
    '@total' => $num_manuscripts,
  ));
}

/**
 * Generates a ZIP file from the files generated by the other operations.
 *
 * @param array &$context
 *   The batch context.
 */
function livingstone_nines_export_zip_batch_operation(array &$context) {
  $pos = livingstone_start_batch_operation_iteration(count($context['results']['files']), $context);
  $zip_file_uri = 'public://' . LIVINGSTONE_NINES_ZIP_FILE;
  $zip_file = drupal_realpath($zip_file_uri);
  // Initialize and create the ZIP archive.
  if ($pos == 0) {
    $zip = new ZipArchive();
    if ($zip->open($zip_file, ZipArchive::CREATE) !== TRUE) {
      livingstone_exit_batch_operation($context, FALSE, 'Failed to create ZIP file: @status', array(
        '@status' => $zip->getStatusString(),
      ));
      return;
    }
  }
  else {
    $zip = new ZipArchive();
    if ($zip->open($zip_file) !== TRUE) {
      livingstone_exit_batch_operation($context, FALSE, 'Failed to open ZIP file.');
      return;
    }
  }

  // Add some files.
  $rdf_files = array_slice($context['results']['files'], 0, 20);
  foreach ($rdf_files as $rdf_file) {
    if (!$zip->addFile(drupal_realpath($rdf_file->uri), $rdf_file->filename)) {
      livingstone_exit_batch_operation($context, FALSE, 'Failed to add file @file to ZIP: @status', array(
        '@file' => $rdf_file->filename,
        '@status' => $zip->getStatusString(),
      ));
      return;
    }
  }

  // Ensure it's closed and the added files have been compressed.
  if (!$zip->close()) {
    livingstone_exit_batch_operation($context, FALSE, 'Failed to close ZIP file: @status', array(
      '@file' => $rdf_file->filename,
      '@status' => $zip->getStatusString(),
    ));
    return;
  }

  // Clean up files that are no longer needed.
  foreach ($rdf_files as $rdf_file) {
    file_delete($rdf_file);
    livingstone_batch_untrack_file($rdf_file, $context);
  }

  livingstone_set_progress_message($context, 'Compressing files (@pos of @total)', array(
    '@pos' => $pos + count($rdf_files),
    '@total' => $context['sandbox']['total'],
  ));

  if (livingstone_end_batch_operation_iteration($context, count($rdf_files), 'Compressed @total Files.', array('@total' => $context['sandbox']['total']))) {
    drupal_set_message(t('Download !file.', array(
      '!file' => l(LIVINGSTONE_NINES_ZIP_FILE, file_create_url($zip_file_uri)),
    )));
  }
}

/**
 * Cleans up temp files, etc.
 *
 * @param array &$context
 *   The batch context.
 */
function livingstone_nines_export_cleanup_operation(array &$context) {
  $total = count($context['results']['files']);
  $pos = livingstone_start_batch_operation_iteration($total, $context);
  $files = array_slice($context['results']['files'], $pos, 20);
  $remove_file = function ($file) {
    file_delete($file);
    livingstone_batch_untrack_file($file);
  };
  array_walk($files, $remove_file);
  livingstone_set_progress_message($context, 'Removing temporary files (@pos of @total)', array(
    '@pos' => $pos,
    '@total' => $total,
  ));
  livingstone_end_batch_operation_iteration($context, count($files));
}
