<?php

/**
 * @file
 * An viewer for manuscripts with a TEI datastream.
 */

const LIVINGSTONE_SPECTRAL_MANUSCRIPT_CMODEL = "livingstone:spectralManuscriptCModel";
const LIVINGSTONE_SPECTRAL_PAGE_CMODEL = "livingstone:spectralPageCModel";
const LIVINGSTONE_ADMINISTER_PERMISSION = 'livingstone administer permission';
/**
 * Implements hook_menu().
 */
function livingstone_menu() {
  return array(
    'admin/livingstone' => array(
      'title' => "Livingstone",
      'description' => "Customizations for Livingstone Online.",
      'access arguments' => array(LIVINGSTONE_ADMINISTER_PERMISSION),
      'type' => MENU_NORMAL_ITEM,
    ),
  );
}

/**
 * Implements hook_permission().
 */
function livingstone_permission() {
  return array(
    LIVINGSTONE_ADMINISTER_PERMISSION => array(
      'title' => t('Administer Livingstone Modules'),
      'description' => t('Allows for the deployment of code and import of content.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function livingstone_theme() {
  return array(
    'livingstone_form_search_block_search_type' => array(
      'file' => 'theme/theme.inc',
      'render element' => 'element',
    ),
    'livingstone_browse_collection_block' => array(
      'file' => 'theme/theme.inc',
      'render element' => 'element',
      'template' => 'theme/livingstone-browse-collection-block',
    ),
    'livingstone_share_icons' => array(
      'file' => 'theme/theme.inc',
      'render element' => 'element',
      'template' => 'theme/livingstone-share-icons',
    ),
    'livingstone_slide_out_menu' => array(
      'file' => 'theme/theme.inc',
      'render element' => 'element',
      'template' => 'theme/livingstone-slide-out-menu',
    ),
  );
}

function livingstone_apachesolr_process_results(&$results) {
  module_load_include('inc', 'livingstone', 'includes/utilities');
  global $user;
  foreach ($results as &$result) {
    if (isset($result['node'])) {
      $node = $result['node'];
      if ($node->bundle == 'manuscript') {
        $node = node_load($node->entity_id);
        if (isset($node->field_manuscript_alt_title[LANGUAGE_NONE][0]['value'])) {
          $result['title'] = $node->field_manuscript_alt_title[LANGUAGE_NONE][0]['value'];
        }
        $get_value = function ($field, $default = NULL) use ($node) {
          return isset($node->{$field}[LANGUAGE_NONE][0]['value']) ?
            $node->{$field}[LANGUAGE_NONE][0]['value'] :
            $default;
        };
        $pid = $get_value('field_manuscript_pid');
        $query = array('query' => livingstone_pid_to_project_id($pid));
        if ($get_value('field_manuscript_viewable', FALSE)) {
          $query['view_pid'] = $pid;
        }
        $variables['url'] = $result['link'] = url("in-his-own-words/catalogue", array(
          'absolute' => TRUE,
          'query' => $query,
        ));
      }
    }
  }
}

/**
 * Implements hook_islandora_derivative_alter().
 * @param array $derivatives
 * @param AbstractObject $object
 */
function livingstone_islandora_derivative_alter(array &$derivatives, AbstractObject $object) {
  foreach ($derivatives as $key => $derivative) {
    if (strpos($derivative['destination_dsid'], 'JP2') === FALSE) {
      unset($derivatives[$key]);
    }
  }
}

/**
 * Implements hook_apachesolr_index_document_build().
 */
function livingstone_apachesolr_index_document_build($document, $entity, $entity_type) {
  if ($entity_type == 'node' && $entity->type == 'manuscript') {
    if (isset($entity->field_manuscript_repository_shelfmark['und'][0]['value'])) {
      $document->addField('ts_field_manuscript_repository_shelfmark', $entity->repository_shelfmark['und'][0]['value']);
    }
    if (isset($entity->field_manuscript_other_versions['und'][0]['value'])) {
      $document->addField('ts_field_manuscript_other_versions', $entity->other_versions['und'][0]['value']);
    }
    if (isset($entity->field_manuscript_tei['und'][0]['value'])) {
      $document->addField('ts_field_manuscript_tei', $entity->tei['und'][0]['value']);
    }
  }
}

/**
 * Implements hook_livingstone_apachesolr_query_alter().
 */
function livingstone_apachesolr_query_alter(DrupalSolrQueryInterface $query) {
  $types = array_keys(array_filter($_GET['type']));
  $web = in_array('web', $types);
  $catalogue = in_array('catalogue', $types);
  $transcriptions = in_array('transcriptions', $types);
  $web_only = $web && !$catalogue && !$transcriptions;
  $manuscript_only = !$web && ($catalogue || $transcriptions);
  $none = !$web && !$catalogue && !$transcriptions;
  if ($none) {
    // Using abort_search causes Apache Solr to error, so we give an impossible
    // query to prevent results.
    // $query->abort_search = TRUE;
    $query->addFilter('bundle', 'section_page');
    $query->addFilter('bundle', 'manuscript');
  }
  if ($web_only) {
    $query->addFilter('bundle', 'section_page');
  }
  if ($manuscript_only) {
    $query->addFilter('bundle', 'manuscript');
  }
  // Reset query filter.
  if (!$web) {
    $query->replaceParam('qf', '');
  }
  if ($catalogue) {
    $query->addParam('qf', array(
      'label^1.0',
      'sm_field_manuscript_project_id^1.0',
      'sm_field_manuscript_pid^1.0',
      'sm_field_manuscript_dates',
      'sm_field_manuscript_creators^0.5',
      'sm_field_manuscript_addressees^0.5',
      'sm_field_manuscript_places_created',
      'sm_field_manuscript_extent_pages',
      'sm_field_manuscript_extent_size',
      'sm_field_manuscript_genres',
      'sm_field_manuscript_copy_of_item',
      'sm_field_manuscript_catalogue_number',
      'ts_field_manuscript_repository_shelfmark',
      'ts_field_manuscript_other_versions',
      'dm_field_manuscript_date_range_start',
      'dm_field_manuscript_date_range_end',
    ));
  }
  if ($transcriptions) {
    $query->addParam('qf', array('ts_field_manuscript_tei^1.0'));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function livingstone_form_search_block_form_alter(array &$form, array &$form_state) {
  $form['search_type'] = array(
    '#theme' => 'livingstone_form_search_block_search_type',
    '#theme_wrappers' => array(),
    '#type' => 'checkboxes',
    '#weight' => -50,
    '#default_value' => drupal_map_assoc(array('web', 'catalogue', 'transcriptions')),
    '#options' => array(
      'web' => t('Search web pages'),
      'catalogue' => t('Search digital catalogue'),
      'transcriptions' => t('Search transcriptions'),
    ),
  );
  $form['#submit'][] = 'livingstone_search_block_submit';
}

/**
 * Sets the type argument for the search query.
 */
function livingstone_search_block_submit(array $form, array &$form_state) {
  if ($form_state['values']['search_type']) {
    $form_state['redirect'] =  array(
      $form_state['redirect'],
      array(
        'query' => array(
          'type' => $form_state['values']['search_type'],
        ),
      ),
    );
  }
}

/**
 * Implements hook_islandora_required_objects().
 */
function livingstone_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'livingstone');
  // Spectral manuscript content model.
  $spectral_manuscript_cmodel = $connection->repository->constructObject(LIVINGSTONE_SPECTRAL_MANUSCRIPT_CMODEL);
  $spectral_manuscript_cmodel->owner = 'fedoraAdmin';
  $spectral_manuscript_cmodel->label = 'Spectral Manuscript Content Model';
  $spectral_manuscript_cmodel->models = 'fedora-system:ContentModel-3.0';
  $ds_composite = $spectral_manuscript_cmodel->constructDatastream('DS-COMPOSITE-MODEL', 'M');
  $ds_composite->label = 'DS-COMPOSITE-MODEL';
  $ds_composite->mimetype = 'application/xml';
  $ds_composite->setContentFromFile("$module_path/xml/livingstone_spectralManuscriptCModel_ds_composite_model.xml", FALSE);
  $spectral_manuscript_cmodel->ingestDatastream($ds_composite);
  // Spectral page content model.
  $spectral_page_cmodel = $connection->repository->constructObject(LIVINGSTONE_SPECTRAL_PAGE_CMODEL);
  $spectral_page_cmodel->owner = 'fedoraAdmin';
  $spectral_page_cmodel->label = 'Spectral Page Content Model';
  $spectral_page_cmodel->models = 'fedora-system:ContentModel-3.0';
  $ds_composite = $spectral_page_cmodel->constructDatastream('DS-COMPOSITE-MODEL', 'M');
  $ds_composite->label = 'DS-COMPOSITE-MODEL';
  $ds_composite->mimetype = 'application/xml';
  $ds_composite->setContentFromFile("$module_path/xml/livingstone_spectralPageCModel_ds_composite_model.xml", FALSE);
  $spectral_page_cmodel->ingestDatastream($ds_composite);
  return array(
    'livingstone' => array(
      'title' => t('Livingstone'),
      'objects' => array(
        $spectral_manuscript_cmodel,
        $spectral_page_cmodel,
      ),
    ),
  );
}

/**
 * Implements hook_islandora_derivative().
 */
function livingstone_livingstone_spectralManuscriptPageCModel_islandora_derivative() {
  module_load_include('inc', 'livingstone_fedora_import', 'fedora.import');
  static $derivatives = FALSE;
  if ($derivatives == FALSE) {
    $derivatives = array();
    $dsids = db_select(LIVINGSTONE_FEDORA_IMPORT_REMOTE_DATASTREAM_TABLE, 'r')
      ->distinct()
      ->fields('r', array('DSID'))
      ->condition('r.DSID', '%OBJ', 'LIKE')
      ->execute()
      ->fetchCol(0);
    foreach ($dsids as $dsid) {
      $format = preg_replace('/_OBJ$/', '', $dsid);
      $format = strtoupper($format);
      $derivatives[] = array(
        'source_dsid' => "{$format}_OBJ",
        'destination_dsid' => "${format}_JP2",
        'function' => array('livingstone_spectral_create_jp2_derivative'),
      );
    }
  }
  return $derivatives;
}

function livingstone_spectral_get_uploaded_file(AbstractObject $object, $src_dsid) {
  $base_name = str_replace(':', '-', $object->id);
  $mime_detector = new MimeDetect();
  $ext = $mime_detector->getExtension($object[$src_dsid]->mimeType);
  $filename = file_create_filename("{$base_name}_{$src_dsid}.{$ext}", 'temporary://');
  $object[$src_dsid]->getContent($filename);
  return $filename;
}

/**
 *
 */
function livingstone_spectral_create_jp2_derivative(AbstractObject $object, $force, array $derivative) {
  module_load_include('inc', 'islandora_large_image', 'includes/derivatives');
  module_load_include('inc', 'islandora_large_image', 'includes/utilities');
  $base_name = str_replace(':', '-', $object->id);
  $src_dsid = $derivative['source_dsid'];
  $dest_dsid = $derivative['destination_dsid'];
  if ($force || !isset($object[$dest_dsid])) {
    $to_return = array(
      'success' => FALSE,
      'messages' => array(),
    );
    $uploaded_file = livingstone_spectral_get_uploaded_file($object, $src_dsid);
    $lossless = variable_get('islandora_lossless', FALSE);
    if (islandora_large_image_is_jp2($uploaded_file) && !$lossless) {
      $derivative_file = $uploaded_file;
    }
    else {

      $depth = islandora_large_image_get_bit_depth($uploaded_file);

      // Create JP2 with kakadu.
      $kakadu = variable_get('islandora_use_kakadu', !islandora_large_image_check_imagemagick_for_jpeg2000());
      $mime = strtolower($object[$src_dsid]->mimetype);
      if ($mime == 'image/jpeg' || $mime == 'image/jpg' || $depth < 8) {
        $kakadu = FALSE;
      }
      // Use lossless if the image would look too bad with compression.
      if (!$lossless) {
        $identify = islandora_large_image_get_identify();
        // Define all these variables in one call for a large performance gain.
        $file_path = drupal_realpath($uploaded_file);
        list($height, $width, $y_resolution, $x_resolution) = explode(
          ',',
          exec(escapeshellcmd("$identify -format \"%h,%W,%y,%x\" $file_path"))
        );
        if (((int) $x_resolution < 300 || (int) $y_resolution < 300) ||
          ($height < 1024 || $width < 1024)) {
          $lossless = TRUE;
        }
      }

      if ($kakadu) {
        // Create JP2.
        if (!$lossless) {
          $derivative_file = islandora_large_image_kdu_compress($uploaded_file, "temporary://{$base_name}_JP2.jp2");
        }
        else {
          $derivative_file = islandora_large_image_kdu_compress(
            $uploaded_file,
            "temporary://{$base_name}_JP2.jp2",
            'Creversible=yes -rate -,1,0.5,0.25 Clevels=5'
          );
        }
        if ($derivative_file === FALSE) {
          $to_return['messages'][] = array(
            'message' => t("Kakadu failed. Trying ImageMagick ..."),
            'type' => 'dsm',
            'severity' => 'status',
          );
          // Force retry with ImageMagick if Kakadu has failed.
          $kakadu = FALSE;
        }
      }
      if (!$kakadu) {
        $args = islandora_large_image_get_args($lossless);
        if ($depth < 8) {
          $args = array_merge($args, array("-depth 8"));
        }
        $derivative_file = islandora_large_image_imagemagick_convert(
          $uploaded_file,
          "temporary://{$base_name}_JP2.jp2",
          $args);
      }
    }
    if ($derivative_file === FALSE) {
      $to_return['messages'][] = array(
        'message' => t('Failed to create JP2 derivative.'),
        'type' => 'watchdog',
        'severity' => WATCHDOG_ERROR,
      );
    }
    else {
      $added_successfully = islandora_large_image_add_datastream($object, $dest_dsid, $derivative_file, 'image/jp2', t('JPEG 2000'));
      if (TRUE === $added_successfully) {
        $to_return['messages'][] = array(
          'message' => t('Created JP2 derivative.'),
          'type' => 'dsm',
          'severity' => 'status',
        );
        $to_return['success'] = TRUE;
      }
      else {
        $to_return['messages'][] = array(
          'message' => t('Failed to add JP2 derivative to the object. Error message: @message', array('@message' => $added_successfully)),
          'type' => 'dsm',
          'severity' => 'warning',
        );
      }
    }
    file_unmanaged_delete($uploaded_file);
    file_unmanaged_delete($derivative_file);
    return $to_return;
  }
}

/**
 * Implements hook_block_info().
 */
function livingstone_block_info() {
  return array(
    'livingstone_browse_collection' => array(
      'info' => t('Livingstone Browse Collection'),
      'cache' => DRUPAL_CACHE_GLOBAL,
      'region' => 'navigation',
      'status' => 1,
    ),
    'livingstone_share_icons' => array(
      'info' => t('Livingstone Share Icons'),
      'cache' => DRUPAL_CACHE_GLOBAL,
      'region' => 'footer',
      'status' => 1,
    ),
    'livingstone_breadcrumbs' => array(
      'info' => t('Livingstone Breadcrumbs'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
      'region' => 'fixed_header',
      'status' => 1,
    ),
    'livingstone_fixed_search_form' => array(
      'info' => t('Livingstone Fixed Header Search Form'),
      'cache' => DRUPAL_CACHE_GLOBAL,
      'region' => 'fixed_header',
      'status' => 1,
    ),
    'livingstone_slide_out_menu' => array(
      'info' => t('Livingstone Slide Out Menu'),
      'cache' => DRUPAL_CACHE_GLOBAL,
      'region' => 'fixed_header',
      'status' => 1,
    ),
    'livingstone_browse_addressee' => array(
      'info' => t('Livingstone Browse Addressee'),
      'cache' => DRUPAL_CACHE_GLOBAL,
      'region' => 'content',
      'status' => 1,
      'weight' => 20,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function livingstone_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'livingstone_browse_collection':
      $block['content'] = array(
        '#theme' => 'livingstone_browse_collection_block',
      );
      break;

    case 'livingstone_share_icons':
      $block['content'] = array(
        '#theme' => 'livingstone_share_icons',
      );
      break;

    case 'livingstone_breadcrumbs':
      $block['content'] = array(
        '#theme' => 'breadcrumb',
        '#breadcrumb' => drupal_get_breadcrumb(),
      );
      break;

    case 'livingstone_fixed_search_form':
      $text = t('Top ⤴');
      $block['content'] = array(
        'form' =>  drupal_get_form('search_block_form'),
        'top' => array(
          '#markup' => "<a class='visible-xs-inline-block' href='#TOP'>{$text}</a>",
        ),
      );
      break;

    case 'livingstone_slide_out_menu':
      $block['content'] = array(
        '#theme' => 'livingstone_slide_out_menu',
      );
      break;

    case 'livingstone_browse_addressee':
      $prefix = isset($_GET['prefix']) ? $_GET['prefix'] : NULL;
      $block['content'] = islandora_solr_facet_pages_callback('addressee', $prefix);
      break;
  }
  return $block;
}

// XXX. Hack do not check this in, it's just to regenerate the paths when pulling in the changes from production.
/*
function livingstone_node_presave($node){
  global $user;
  if($node->type=='section_page'){
    $node->path['pathauto']=1;
  }
}*/
